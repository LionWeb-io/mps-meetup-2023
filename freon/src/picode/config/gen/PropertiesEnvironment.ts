// Generated by the Freon Language Generator.
import {
    FreEditor,
    FreEnvironment,
    FreReader,
    FreCompositeTyper,
    FreValidator,
    FreStdlib,
    FreWriter,
    FreInterpreter,
    FreScoperComposite,
    FreLanguageEnvironment,
    FreProjectionHandler
} from "@freon4dsl/core";
import { PropertiesActions, initializeEditorDef, initializeProjections } from "../../editor/gen";
import { initializeScoperDef } from "../../scoper/gen/PropertiesScoperDef";
import { initializeTypers } from "../../typer/gen/PropertiesTyperDef";
import { PropertiesValidator } from "../../validator/gen/PropertiesValidator";
import { PropertiesModelUnitWriter } from "../../writer/gen/PropertiesModelUnitWriter";
import { PropertiesModelUnitReader } from "../../reader/gen/PropertiesModelUnitReader";
import { MainPropertiesInterpreter } from "../../interpreter/MainPropertiesInterpreter";
import { Properties, PropertiesFile, initializeLanguage } from "../../language/gen";

/**
 * Class PropertiesEnvironment provides the link between all parts of the language environment.
 * It holds the currently used editor, scoper, typer, etc, thus providing an entry point for
 * for instance, the editor to find the right scoper, or for the validator to find the typer
 * to use.
 * This class uses the singleton pattern to ensure that only one instance of the class is present.
 */
export class PropertiesEnvironment implements FreEnvironment {
    private static environment: FreEnvironment; // the only instance of this class

    /**
     * This method implements the singleton pattern
     */
    public static getInstance(): FreEnvironment {
        if (this.environment === undefined || this.environment === null) {
            this.environment = new PropertiesEnvironment();
            FreLanguageEnvironment.setInstance(this.environment);
        }
        return this.environment;
    }

    /**
     * A private constructor, as demanded by the singleton pattern.
     */
    private constructor() {
        const actions = new PropertiesActions();
        const myComposite = new FreProjectionHandler();
        this.editor = new FreEditor(myComposite, this, actions);
        initializeLanguage();
        initializeProjections(myComposite);
        initializeEditorDef();
        initializeScoperDef(this.scoper);
        initializeTypers(this.typer);
    }

    /**
     * Returns a new model with name 'modelName'.
     *
     * @param modelName
     */
    newModel(modelName: string): Properties {
        const model = new Properties();
        model.name = modelName;
        return model;
    }

    // the parts of the language environment
    editor: FreEditor;
    scoper: FreScoperComposite = new FreScoperComposite("main");
    typer: FreCompositeTyper = new FreCompositeTyper("main");
    validator: FreValidator = new PropertiesValidator();
    writer: FreWriter = new PropertiesModelUnitWriter();
    reader: FreReader = new PropertiesModelUnitReader();
    interpreter: FreInterpreter = new MainPropertiesInterpreter();
    languageName: string = "Properties";
    fileExtensions: Map<string, string> = new Map([["PropertiesFile", "pro"]]);
}
