// Generated by the Freon Language Generator.
import { FreLanguage, FreProjectionHandler, FreBoxProvider } from "@freon4dsl/core";
import { freonConfiguration } from "../../config/FreonConfiguration";
import { Property, BooleanValue, DecValue, IntValue, StringValue } from "../../language/gen";
import {
    PropertyBoxProvider,
    BooleanValueBoxProvider,
    DecValueBoxProvider,
    IntValueBoxProvider,
    StringValueBoxProvider,
    PropertiesFileBoxProvider
} from "../../editor/gen";

const map = new Map<string, Map<string, Map<string, string>>>();

/**
 * Adds all known projection groups to the root projection.
 * @param handler
 */
export function initializeProjections(handler: FreProjectionHandler) {
    handler.addProjection("property_file_like");
    for (const p of freonConfiguration.customProjection) {
        handler.addCustomProjection(p);
    }
    handler.initConceptToPropertyProjection(map);
    handler.initProviderConstructors(
        new Map<string, () => FreBoxProvider>([
            [
                "Property",
                () => {
                    return new PropertyBoxProvider(handler);
                }
            ],
            [
                "BooleanValue",
                () => {
                    return new BooleanValueBoxProvider(handler);
                }
            ],
            [
                "DecValue",
                () => {
                    return new DecValueBoxProvider(handler);
                }
            ],
            [
                "IntValue",
                () => {
                    return new IntValueBoxProvider(handler);
                }
            ],
            [
                "StringValue",
                () => {
                    return new StringValueBoxProvider(handler);
                }
            ],
            [
                "PropertiesFile",
                () => {
                    return new PropertiesFileBoxProvider(handler);
                }
            ]
        ])
    );
    handler.initTableHeaders([]);
}

/**
 * Adds trigger and reference shortcut info to the in-memory representation of structure of the language metamodel.
 */
export function initializeEditorDef() {
    FreLanguage.getInstance().concept("Property").trigger = "Property";
    FreLanguage.getInstance().concept("BooleanValue").trigger = "BooleanValue";
    FreLanguage.getInstance().concept("DecValue").trigger = "DecValue";
    FreLanguage.getInstance().concept("IntValue").trigger = "IntValue";
    FreLanguage.getInstance().concept("StringValue").trigger = "StringValue";

    const conceptProjectionToPropertyProjection = new Map();
}
