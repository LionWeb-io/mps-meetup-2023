// Generated by the Freon Language Generator.
// This file contains the input to the AGL parser generator
// (see https://https://github.com/dhakehurst/net.akehurst.language).
// The grammar in this file is read by PropertiesModelUnitReader

export const PropertiesGrammarStr = `
namespace PropertiesLanguage
grammar PropertiesGrammar {

// rules for "PropertiesFile"
PropertiesFile = 'PropertiesFile' identifier '\{'
	 'props'
	 Property*
	 '}' ;

Property = 'Property' identifier '\{'
	 'value' Value
	 '}' ;

BooleanValue = 'BooleanValue' '\{'
	 'value' booleanLiteral
	 '}' ;

DecValue = 'DecValue' '\{'
	 'value' stringLiteral
	 '}' ;

IntValue = 'IntValue' '\{'
	 'value' stringLiteral
	 '}' ;

StringValue = 'StringValue' '\{'
	 'value' stringLiteral
	 '}' ;

Value = BooleanValue 
    | DecValue 
    | IntValue 
    | StringValue  ;

// common rules

__fre_reference = [ identifier / '.' ]+ ;

// white space and comments
skip WHITE_SPACE = "\\s+" ;
skip SINGLE_LINE_COMMENT = "//[^\\r\\n]*" ;
skip MULTI_LINE_COMMENT = "/\\*[^*]*\\*+(?:[^*/][^*]*\\*+)*/" ;

// the predefined basic types
leaf identifier          = "[a-zA-Z_][a-zA-Z0-9_]*" ;
/* see https://stackoverflow.com/questions/37032620/regex-for-matching-a-string-literal-in-java */
leaf stringLiteral       = '"' "[^\\"\\\\]*(\\\\.[^\\"\\\\]*)*" '"' ;
leaf numberLiteral       = "[0-9]+";
leaf booleanLiteral      = 'false' | 'true';

}`; // end of grammar
